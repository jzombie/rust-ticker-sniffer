File: /home/jeremy/Projects/ticker-sniffer/benches/my_benchmark.rs
-------------------------------------
#[path = "../tests/test_utils.rs"]
mod test_utils;

use criterion::{black_box, criterion_group, criterion_main, Criterion};
use test_utils::load_symbols_from_file;
use ticker_sniffer::extract_tickers_from_text;

fn benchmark_extract_tickers(c: &mut Criterion) {
    let symbols_map =
        load_symbols_from_file("tests/test_symbols.csv").expect("Failed to load symbols from CSV");

    let text = "AAPL is performing well, but MSFT is also a strong contender.";

    c.bench_function("extract_tickers", |b| {
        b.iter(|| extract_tickers_from_text(black_box(text), black_box(&symbols_map)))
    });
}

criterion_group!(benches, benchmark_extract_tickers);
criterion_main!(benches);

=====================================

File: /home/jeremy/Projects/ticker-sniffer/src/lib.rs
-------------------------------------
use std::collections::HashMap;

/// Core function to extract tickers from text.
pub fn extract_tickers_from_text(
    text: &str,
    symbols_map: &HashMap<String, Option<String>>,
) -> Vec<String> {
    let mut matches = vec![];
    let tokens: Vec<&str> = text.split_whitespace().collect();

    for token in tokens {
        let normalized = token
            .trim_matches(|c: char| !c.is_alphanumeric())
            .to_uppercase();

        if symbols_map.contains_key(&normalized) {
            matches.push(normalized);
        }
    }

    matches
}

=====================================

File: /home/jeremy/Projects/ticker-sniffer/tests/extract_tickers_tests.rs
-------------------------------------
#[cfg(test)]
mod tests {
    use super::*;

    #[path = "./test_utils.rs"]
    mod test_utils;

    use test_utils::load_symbols_from_file;

    #[test]
    fn test_extract_tickers_with_csv() {
        let symbols_map = load_symbols_from_file("tests/test_symbols.csv")
            .expect("Failed to load symbols from CSV");

        let text = "AAPL is performing well, but MSFT is also a strong contender.";

        let results = extract_tickers_from_text(text, &symbols_map);

        assert_eq!(results.len(), 2);
        assert!(results.contains(&"AAPL".to_string()));
        assert!(results.contains(&"MSFT".to_string()));
    }
}

=====================================

File: /home/jeremy/Projects/ticker-sniffer/tests/test_utils.rs
-------------------------------------
#[cfg(any(test, bench))]
pub mod test_utils {
    use csv::Reader;
    use std::collections::HashMap;
    use std::error::Error;

    /// Utility to load symbols from a CSV file for testing and benchmarking.
    pub fn load_symbols_from_file(
        file_path: &str,
    ) -> Result<HashMap<String, Option<String>>, Box<dyn Error>> {
        let mut symbols_map = HashMap::new();
        let mut reader = Reader::from_path(file_path)?;

        for record in reader.records() {
            let record = record?;
            if record.len() == 2 {
                let symbol = record.get(0).unwrap().to_uppercase();
                let company_name = record.get(1).map(|name| name.to_string());
                symbols_map.insert(symbol, company_name);
            } else {
                eprintln!("Skipping invalid row: {:?}", record);
            }
        }

        Ok(symbols_map)
    }
}

=====================================

